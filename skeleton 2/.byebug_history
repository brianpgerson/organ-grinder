c
 @params["authenticity_token"]
session['authenticity_token']
session['authenticity_token'] == @params["authenticity_token"]
q
@params[:authenticity_token]q
@params[:authenticity_token]
@params
session['authenticity_token']
s
c
@params
@req.params
session['authenticity_token']
@req.cookies
@req.params
@req
@params
session[:authenticity_token]
s
@req.request_method
s
c
danger_requests
s
danger_requests
@req.request_method
c
q
form
q
@req.request_method
@req.methods - Object.methods
@req
c
file.is_a?(String)
file.is_a?(string)
file
c
File.read('public/fundog.jpg')
req.path
c
reg.match(@req.path)[0][1..-1]
reg.match(@req.path)[1..-1]
reg.match(@req.path)
reg = Regexp.new(/\.\w+/)
reg.match(@req.path)
reg = Regexp.new(/\.\w/)
@req.path
@req
req.path
q
lines.map {|l|l.chomp}.join
lines.map {|l|l.chomp}
lines.chomp
lines.join
lines
c
exit
lines
liens
q
lines
q
@res.bodq
@res.body
@res
q
chunk
q
chunk.map { |l| l.chomp }
chunk = sc[a-4..a+4]
sc[a-4..a+4]
sc = source_code.reject { |el| el == "\n" }
sc = source_code.reject { |el| el == "/n" }
source_code.reject { 
source_code[a-4..a+4]
source_code
source_code(a-4..a+4)
a = source_code_path[1].to_i
source_code_path[1].to_i
source_code_path[1]
path
source_code
s
q
s
source_code
s
source_code_path
q
source_code_path[0]
source_code_path
q
e.message
e.exception.to_s
e.exception
e.methods - Object.methods
e.to_s
e.to_S
e
b = reg.scan(a)
b = reg.match(a)
reg = Regexp.new(/\d+|[^:]*|/)
b = reg.match(a)
reg = Regexp.new(/[^:]*|\d+/)
b[0]
b = reg.match(a)
reg.match(a)
a
reg.match =
reg = Regexp.new(/[^:]*/)
reg = Regexp.new(/[^;]*/)
reg = Regexp(/[^;]*/)
a = e.backtrace.first
a + -
e.backtrace.first
e
a = _
e.backtrace.first
e
q
res.header
res.methods - Object.methods
res.header
res.headers
res
n
c
n
exception.backtrace
exception
s
e
q
a.each { |line| print "#{line}\n" } 
p a.join("\n")
a
b = _
a.join("\n")
a.join(("\n")
a = e.backtrace
e.backtrace
e.methods - Object.methods
e.methods
e
q
cq
Exception
Error
error
q
c
res
c
@status
c
@status
c
n
res.cookies
res
n
flash
n
@flash
@status
q
req.methods - Object.methods
req.cookies
c
q
req.delete_cookie
req.cookies
q
c
n
q
n
c
q
n
s
n
q
req.cookies['_flag']
req.cookies['_flash']
JSON.parse(req.cookies['_flash'])
@flash
c
n
q
c
@flash
c
n
s
res
s
already_built_response?
already_build_response?
name
s
@already_built_response
n
@flash
n
@flash
n
@res
n
@res
n
s
n
q
exit
n
@flash
c
@flash
c
n
flash
c
@flash
c
@flash
c
@flash
c
res.cookies
res
@flash
c
@flash
c
